import React from 'react';
import classNames from 'classnames';
import _ from 'lodash';
import ReactMixin from 'react-mixin';
import { 
	Locations,
	Location, 
	NotFound 
} from 'react-router-component';
import 'react-mdl/extra/material';
import MDL from 'react-mdl';
import FlatColor from 'flat-colors';
import Swiper from 'swiper/dist/js/swiper';

let mixin = ReactMixin.decorate;
let {Component} = React;

let prefix = (function () {
  let styles = window.getComputedStyle(document.documentElement, ''),
    pre = (Array.prototype.slice
      .call(styles)
      .join('') 
      .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
    )[1],
    dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
  return {
    dom: dom,
    lowercase: pre,
    css: '-' + pre + '-',
    js: pre[0].toUpperCase() + pre.substr(1)
  };
})();

let prefixedTransform = prefix.js + 'Transform';



class MDLGridList extends Component{
	
	constructor(p){
		super(p);
		this.pattern =  this.props.pattern || [

							['1x1','1x1','1x1'],
							['1x1','1x1','1x1'],
							['1x1','1x1','1x1'],

						];
	}

	renderSubGrid(){

	}
	
	render(){
		return 	<div className="mdl-grid-list">

				</div>;
	}
};

class Brand extends Component{
	render(){
		return <a className="brand" href="/#/">Z<span className="brand__accent">i</span>F<span className="brand__accent">i</span>NGO</a>
	}
}

class SiteNav extends Component{
	render(){
		return 	<nav className="navigation">
					<ul className="list list--horizontal list--no-style">
						<li className="navigation__link">
							<a href="#">How it works ?</a>
						</li>
					</ul>
				</nav>
	}
}

class GridList extends Component{
	render(){
		return 	<div className="mdo-grid-list">
					<div className="mdo-grid">
						<div className="mdo-grid">
							<MDL.Card className="mdo-card" style={{ backgroundImage: 'url(http://www.apple.com/iphone-6/images/og.jpg?201507310106)' }}>
								<MDL.CardTitle expand={true}></MDL.CardTitle>
								<MDL.CardActions className="mdo-card__overlay">
									<h3 className="mdl-typography--headline">iPhone 6</h3>
									<p className="mdl-typography--caption">Chance to win a brand new iPhone 6, simply upload a photograph to instagram tagged #iphonography</p>
								</MDL.CardActions>
							</MDL.Card>
						</div>
						<div className="mdo-grid mdo-grid--vert">
							<div className="mdo-grid">
									<MDL.Card className="mdo-card"  style={{ backgroundImage: 'url(http://www.tanay.co.in/sites/default/files/field/image/ola.png)' }}>
										<MDL.CardTitle expand={true}></MDL.CardTitle>
										<MDL.CardActions className="mdo-card__overlay">
											<h3 className="mdl-typography--subhead">Ola Ride on !</h3>
										</MDL.CardActions>
									</MDL.Card>
							</div>
							<div className="mdo-grid">
								<div className="mdo-grid">
									<MDL.Card className="mdo-card" style={{ backgroundImage: 'url(http://topclassactionscom.c.presscdn.com/wp-content/uploads/2015/06/pepsi.png)' }}></MDL.Card>
								</div>
								<div className="mdo-grid">
									<MDL.Card className="mdo-card"  style={{ backgroundImage: 'url(http://images.electricpig.co.uk/wp-content/uploads/2008/08/philips-lux-tv.jpg)' }}>
										<MDL.CardTitle expand={true}></MDL.CardTitle>
										<MDL.CardActions className="mdo-card__overlay">
											<h3 className="mdl-typography--subhead">Philips LUX Smart TV</h3>
										</MDL.CardActions>
									</MDL.Card>
								</div>
							</div>
						</div>
						<div className="mdo-grid">
							<div className="mdo-grid mdo-grid--small">
								<MDL.Card className="mdo-card" style={{ backgroundImage: 'url(http://www.caputomarkets.com/Content/Images/uploaded/Home%20Page/Blog/pizza.jpg)' }}>
									<MDL.CardTitle expand={true}></MDL.CardTitle>
									<MDL.CardActions className="mdo-card__overlay">
										<h3 className="mdl-typography--subhead">#instapizza</h3>
									</MDL.CardActions>
								</MDL.Card>
							</div>
							<div className="mdo-grid mdo-grid--small">
								<MDL.Card className="mdo-card"></MDL.Card>
							</div>
							<div className="mdo-grid mdo-grid--small">
								<MDL.Card className="mdo-card"></MDL.Card>
							</div>
							<div className="mdo-grid mdo-grid--small">
								<MDL.Card className="mdo-card"></MDL.Card>
							</div>
						</div>
					</div>
				</div>;
	}
}

class MDLChip extends Component{
	paintCurtain(e){
		console.log(e);
		this.props.onRequestCurtain({
			position: {
				top: e.clientY,
				left: e.clientX
			},
			color: this.props.meta.color,
			transitionTo: this.props.meta.link
		});
	}

	render(){
		return 	<div className="mdl-chip" onClick={(e)=>this.paintCurtain(e)}>
					{this.props.children}
				</div>;
	}
}

class CurtainManager extends Component{
	constructor(props){
		super(props);
		this.state = {
			animating: false,
			animated: false,
			exploding: false,
			exploded: false,
			shrinking: false,
			shrinked: false,
			position: {
				left: 0,
				top: 0
			},
			color: 'transparent'
		};
	}

	animate(opts){

		if( this.state.animating == false ){
			setTimeout(t => this.explode(), 100);
		}

		this.setState({
			position: opts.position, 
			color: opts.color,
			animating: true
		});

	}
	
	explode(){
		this.setState({
			exploding: true,
			animated: true
		});
		setTimeout( t => this.exploded(), 200);
	}

	exploded(){
		this.setState({
			exploded: true
		});
		window.location.hash = '/o/'
		setTimeout( t => this.shrink(), 40);		
	}
	
	shrink(){
		this.setState({
			shrinking: true,
		});
		setTimeout( t => this.shrinked(), 200);
	}

	shrinked(){
		this.setState({
			hide: true
		});
		setTimeout( t => this.hide(), 40);
	}

	hide(){
		this.setState({
			animating: false,
			animated: false,
			exploding: false,
			exploded: false,
			shrinking: false,
			shrinked: false,
		});
	}

	render(){

		let cnames = classNames("mdo-curtain", {
			'mdo-curtain--animating': this.state.animating,
			'mdo-curtain--animated': this.state.animated,
			'mdo-curtain--exploding': this.state.exploding,
			'mdo-curtain--exploded': this.state.exploded,
			'mdo-curtain--shrinking': this.state.shrinking,
			'mdo-curtain--shrinked': this.state.shrinked
		});

		let chipStyle = {
			background: this.state.color,
			top: this.state.position.top - 120,
			left: this.state.position.left - 120
		};

		let curtainStyle   = {
			background: this.state.color
		};

		return 	<div className={cnames}>
					<div 
						className="mdo-curtain__chip" 
						style={chipStyle}
					></div>
					<div 
						className="mdo-curtain__curtain"
						style={curtainStyle}
					>
					</div>
				</div>
	}

}

class HomePage extends Component{
	render(){
		let meta = {
			favicon: 'http://adidas.co.in/favicon.ico',
			url: '/insta/230',
			color: '#121212',
			title: 'Adidas',
		};

		return  <div className="home-page">
					<div className="mdo-canvas">
						<main className="mdl-grid mdl-grid--no-spacing">
						    <div className="mdl-cell mdl-cell--2-col-phone mdl-cell--4-col-tablet mdl-cell--2-col-desktop">
						    	<MDLChip meta={meta} onRequestCurtain={this.props.onRequestCurtain}>
						        	50% phone <br /> 50% tablet <br /> 16.6% desktop
						        </MDLChip>
						    </div>
						    <div className="mdl-cell mdl-cell--2-col-phone mdl-cell--4-col-tablet mdl-cell--2-col-desktop">
						    	<MDLChip meta={meta} onRequestCurtain={this.props.onRequestCurtain}>
							        50% phone <br /> 50% tablet <br /> 16.6% desktop
						        </MDLChip>
						    </div>
						    <div className="mdl-cell mdl-cell--2-col-phone mdl-cell--8-col-tablet mdl-cell--2-col-desktop">
						    	<MDLChip meta={meta} onRequestCurtain={this.props.onRequestCurtain}>
							        50% phone <br /> 100% tablet <br /> 16.6% desktop
						        </MDLChip>
						    </div>
						    <div className="mdl-cell mdl-cell--2-col-phone mdl-cell--5-col-tablet mdl-cell--2-col-desktop">
						    	<MDLChip meta={meta} onRequestCurtain={this.props.onRequestCurtain}>
							        50% phone <br /> 62.5% tablet <br /> 16.6% desktop
						        </MDLChip>
						    </div>
						    <div className="mdl-cell mdl-cell--2-col-phone mdl-cell--3-col-tablet mdl-cell--2-col-desktop">
						    	<MDLChip meta={meta} onRequestCurtain={this.props.onRequestCurtain}>
							        50% phone <br /> 37.5% tablet <br /> 16.6% desktop
						        </MDLChip>
						    </div>
						    <div className="mdl-cell mdl-cell--2-col-phone mdl-cell--8-col-tablet mdl-cell--2-col-desktop">
						    	<MDLChip meta={meta} onRequestCurtain={this.props.onRequestCurtain}>
							        50% phone <br /> 100% tablet <br /> 16.6% desktop
						        </MDLChip>
						    </div>
						</main>
					</div>
				</div>;
	}
}

class IPhoneCompetition extends Component{	
	constructor(props){
		super(props);
		window.document.body.style.backgroundColor = "#fff";
	}
	render(){
		return 	<div className="offer offer--iphone">

				</div>;
	}
}

class CompetitionPage extends Component{
	render(){
		return 	<div className="offer">
					{/* Branding is done by the brand */}
					<InAppBrowser 
						favicon="https://en.wikipedia.org/favicon.ico"
						src="http://en.wikipedia.org/wiki/design"
						backgroundColor="#121212"
						title="Wikipedia"
					></InAppBrowser>

				</div>
	}
}

let questions = [{
	id: 1,
	q: 'What is the contigious kind of music Lila likes ?',
	options: ['dubstep','chillstep','rock','classical']
},{
	id: 2,
	q: 'The bird in the image is a ',
	type: 'image',
	options: ['Golden Eagle', 'Bald Eagle', 'King Eagle', 'Peacock'],

},{
	id: 3,
	q: 'Who let the dogs out ?',
	options: ['Who', 'Who', 'Who', 'Jesus']
}];

class InAppBrowser extends Component{
	constructor(props){
		super(props);
		this.state = {
			hasLoaded: false,
			hasOpened: false
		};
		setTimeout( _ => this.setHasOpened(), 100);
	}

	requestClose(){
		history.back();
	}

	fakeProgress(){
		this.progress = 0;
		this.loader = setInterval( _ => {
			this.progress += (100 - this.progress) / 10;
			this.updateProgressBar(this.progress);
			if( this.progress > 90 ){
				clearInterval(this.loader);
			}
		}, 100);

	}
	
	componentDidMount(){
		this.fakeProgress();
	}

	componentWillUnmount(){
		clearInterval(this.loader);
	}

	setHasOpened(){
		this.setState({
			hasOpened: true
		});
	}

	updateProgressBar(perc){
		// not very optimal but oh - well ?
		let style = this.refs.progress.getDOMNode().style;
		style[prefixedTransform] = `translateX(-${100 - perc}%)`;
	}
	
	doneLoading(){
		this.updateProgressBar(100);
		clearInterval(this.loader);
		setTimeout ( t => this.setState({
			hasLoaded: true
		}));
	}

	attemptRefresh(){
		console.log("Wtf?");
		this.refs.frame.getDOMNode().src += '';
		this.setState({
			hasLoaded: false
		});
		this.fakeProgress();
	}

	startCompetiton(){
		window.location.hash = '/insta/';
	}

	render(){
		let cnames = classNames("inapp-browser", {
			'inapp-browser--has-loaded': this.state.hasLoaded,
			'inapp-browser--has-opened': this.state.hasOpened
		});

		return 	<div className={cnames}>
					<header 
						style={{backgroundColor: this.props.backgroundColor}} 
						className="inapp-browser__top-bar"
					>	
						<div ref="progress" className="inapp-browser__progress"></div>
						<div className="inapp-browser__header"> 
							<img 
								className="inapp-browser__favicon"
								src={this.props.favicon}
							/>
							<h2 className="inapp-browser__title mdl-typography--subhead">{this.props.title}</h2>
							<div className="inapp-browser__controls">
				                <MDL.IconButton className="inapp-browser__control" name="more_vert" ripple={true} id="inapp-browser__more-controls"/>
				                <MDL.Menu target="inapp-browser__more-controls" align="right">
				                    <MDL.MenuItem onClick={(e)=>this.startCompetiton(e)} className="inapp-browser__menu-button"><MDL.Icon name="view_agenda" />Join</MDL.MenuItem>
				                    <MDL.MenuItem onClick={(e)=>this.attemptRefresh(e)} className="inapp-browser__menu-button"><MDL.Icon name="refresh" />Reload</MDL.MenuItem>
				                    <MDL.MenuItem onClick={(e)=>this.attemptShare(e)} className="inapp-browser__menu-button"><MDL.Icon name="share" />Share</MDL.MenuItem>
				                </MDL.Menu>								
								<MDL.IconButton className="inapp-browser__control" name="close" onClick={e => this.requestClose()} ripple={true} />
							</div>
						</div>
					</header>
					<iframe 
						ref="frame"
						src={this.props.src} 
					 	seamless='true'
					 	onLoad={e => this.doneLoading()}
					 	sandbox='allow-scripts'
					 	allowTransparency='true' 
					 	allowFullScreen='true' 
					 	className="inapp-browser__iframe"
					 ></iframe>

				</div>;
	}
}

class StopWatch extends Component{
	constructor(props){
		
		super(props);
		
		let endPoint = props.endAfter + Date.now();
		this.state = {
			text: this._getTimeLeftTill(endPoint),
			endAt: endPoint
		};

		setInterval(() => this.tick(), 1000);
	}
	
	_getTimeLeftTill(endTime){
		let diff = endTime - Date.now();

		if( diff <= 0 ){
			return '00:00';
		}

		diff = Math.floor( diff / 1000 );

		let seconds = diff % 60;
		let minutes = Math.floor( diff / 60 ) % 60;
		let hours   = Math.floor( diff / 3600 ) % 24;
		let days    = Math.floor( diff / (3600 * 24) ) % 30;

		return [days, hours, minutes, seconds]
				.filter ( x => !! x )
				.map( x => x < 10? '0'+x : x )
				.join(':');
	}

	tick(){
		this.setState({
			text: this._getTimeLeftTill(this.state.endAt)
		});
	}

	render(){
		return 	<div className="stopwatch">
					<MDL.Icon name="alarm" />{this.state.text}
				</div>;
	}
}

class ReactSwiper extends Component{
	componentDidMount(){
		let el = React.findDOMNode(this.refs.swiper);
		console.log(this.props.opts);
		this._scroller = new Swiper(el, this.props.opts);
	}

	render(){
		return 	<div ref="swiper" className="swiper-container">
					<div className="swiper-wrapper">
						{React.Children.map(this.props.children, (el, idx) => {
							return  <div className="swiper-slide" key={idx}>
										{el}
									</div>;
						})}
					</div>
				</div>;
	}
}


class Question extends Component{

	constructor(props){
		super(props);
		this.state = {
			hasChoice: false
		};
	}

	handleOptionSelected(e){
		/* Inject Flux here */
		this.setState({
			hasChoice: true
		});
	}

	render(){
		let q = this.props.meta;
		let questionClassNames = classNames('questionaire__question',{
			'questionaire__question--with-image': q.type === 'image',
			'questionaire__question--with-audio': q.type === 'audio',
			'questionaire__question--with-video': q.type === 'video'
		});

		let questionWrapperClassNames = classNames('questionaire__question-wrapper', {
			'questionaire__question-wrapper--has-choice': this.state.hasChoice
		});

		return 	<MDL.Card className={questionWrapperClassNames} style={this.props.style} shadow={4}>
					<div className={questionClassNames}>
						<div className="mdo-spacer" />
						<h3 className="questionaire__question-text mdl-typography--headline">{q.q}</h3>
					</div>
					<div className="questionaire__answers">
						<div className="questionaire__options">
			                <MDL.RadioGroup name={"options_" + q.id} onChange={e => this.handleOptionSelected(e) }>
			                    {q.options.map( (opt, idx) => {
			                    	return <MDL.Radio className="questionaire__option" value={"opt" + idx}>{opt}</MDL.Radio>;
			                    })}
			                </MDL.RadioGroup>
						</div>
					</div>
					<MDL.CardActions border={true}>
						<MDL.Button accent={true} ripple={true}>
							Next 
						</MDL.Button>
					</MDL.CardActions>
				</MDL.Card>;

	}
}

class Questionaire extends Component{
	constructor(props){
		super(props);
		this.state = {
			curr: 0
		};
	}

	handleSlideChange(e){
		this.setState({
			curr: e.activeIndex
		})
	}

	render(){
							// <ReactSwiper opts={{
							// 	slidesPerView: 1,
							// 	spaceBetween: 40,
							// 	onSlideChangeEnd: (e) => this.handleSlideChange(e)
							// }}>
							// </ReactSwiper>

		return 	<div className="questionaire">
					<header className="questionaire__top-bar">
						<div className="questionaire__time-container">
							<h3 className="questionaire__time-left">
								<StopWatch endAfter={600000} />
							</h3>
						</div>
						<MDL.IconButton name="close" />
					</header>
					<div className="questionaire__swiper-container">
						<div className="questionaire__swiper-wrapper">
							{questions.map( (q, index) => {
								return <Question meta={q} style={{
									zIndex: 100 - index,
									transform: 'translateY(' + -index * 5 + 'px) scale(' + 10 / (10 + index) + ')'
								}} />;
							} )}
						</div>
					</div>
					<footer className="questionaire__footer">
						 <div className="questionaire__meta">
						 	<div className="questionaire__meta-image-container">
						 		<img 
						 			className="questionaire__meta-image" 
						 			src="http://en.wikipedia.org/favicon.ico" 
						 		/>
						 	</div>
						 	<div className="questionaire__meta-text">
						 		<h5 className="questionaire__meta-name">Wikipedia</h5>
						 		<p className="questionaire__meta-caption">Random questions</p>
						 	</div>
						 	<div className="questionaire__meta-progress">
						 		<h4 className="questionaire__progress--text">{this.state.curr + 1}/{questions.length}</h4>
						 	</div>
						 </div>
					</footer>
					<MDL.ProgressBar 
						className="questionaire__progress--bar" 
						progress={Math.floor((100 * (this.state.curr + 1 ))/ questions.length)} 
					/>
				</div>;
	}
}

class InstaCompetition extends Component {
	render(){
		return  <div className="competiton competition--instagram">
					<Questionaire list={questions}/>
				</div>;
	}
}



const App =React.createClass({
	requestCurtain(opts){
		this.refs.curtainManager.animate(opts);
	},

	render(){
		return  <div className="app">
					<CurtainManager ref="curtainManager" />
					<Locations 
						hash={true} 
					>	
						<Location path="/" handler={HomePage} onRequestCurtain={this.requestCurtain}></Location>
						<Location path="/o/" handler={CompetitionPage}></Location>
						<Location path="/insta/" handler={InstaCompetition}></Location>
					</Locations>
				</div>;	
	}
});


React.render(<App />, document.getElementById('foo'));